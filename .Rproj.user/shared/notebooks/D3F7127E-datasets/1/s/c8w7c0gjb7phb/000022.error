{"frames":[{"func":"ifpri %>% filter(str_detect(var, \"b_|k_|f_01_|f_05_|j_01|j_07|j_08|l2_|k_|e_01|e_03|e_05|e_06|e_07|n_\")) %>% \n    replace_na(list(value = 0)) %>% select(hhid, var, value) %>% \n    pivot_wider(names_from = var, values_from = value) %>% map_df(unlist)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"map_df(., unlist)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"dplyr::bind_rows(res, .id = .id)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"as_tibble(dots)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"as_tibble.list(dots)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"lst_to_tibble(x, .rows, .name_repair, col_lengths(x))","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"recycle_columns(x, .rows, lengths)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"cnd_signal(error_incompatible_size(.rows, names(x), lengths, \n    \"Requested with `.rows` argument\"))","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"signal_abort(cnd)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"stop(fallback)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0}],"message":"Error: Tibble columns must have compatible sizes.\n* Size 12100: Columns `hhid`, `b_07`, `b_08`, `b_09`, `e_01`, and 100 more.\n* Size 24200: Columns `k_02_emergency` and `k_04_emergency`.\n* Size 96800: Columns `k_02_crisis` and `k_04_crisis`.\n\u001B[34mi\u001B[39m Only values of size one are recycled.\n\u001B[90mRun `rlang::last_error()` to see where the error occurred.\u001B[39m\n"}